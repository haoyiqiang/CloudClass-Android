import com.vanniktech.maven.publish.SonatypeHost

//import com.vanniktech.maven.publish.AndroidMultiVariantLibrary
import com.vanniktech.maven.publish.AndroidSingleVariantLibrary

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id("com.vanniktech.maven.publish") version("0.29.0")
}

android {
    compileSdk rootProject.ext.android.compileSdkVersion
    //buildToolsVersion rootProject.ext.android.buildToolsVersion

    resourcePrefix "cloud_"

    namespace "io.agora.online"

    lintOptions {
        abortOnError false
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.AgoraCloudScene.versionCode
        versionName rootProject.ext.AgoraCloudScene.versionName

        buildConfigField 'String', 'AgoraCloudScene', String.format("\"%s\"", rootProject.ext.AgoraCloudScene.versionName)
        consumerProguardFiles "consumer-rules.pro"

        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    viewBinding {
        enabled = true
    }
    sourceSets {
        main {
            res.srcDirs = ['src/main/res']
        }
    }
}

dependencies {
    //implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.core:core-ktx:${rootProject.ext.dependencies.core_ktx}"
    implementation "androidx.appcompat:appcompat:${rootProject.ext.dependencies.appcompat}"
    implementation "com.google.android.material:material:${rootProject.ext.dependencies.material_material}"
    api "com.github.bumptech.glide:glide:${rootProject.ext.dependencies.glide}"
    annotationProcessor "com.github.bumptech.glide:compiler:${rootProject.ext.dependencies.glide_compiler}"
    implementation "androidx.constraintlayout:constraintlayout:${rootProject.ext.dependencies.constraintlayout}"
    implementation "com.github.netless-io:whiteboard-android:${rootProject.ext.dependencies.white_sdk_android}"
    implementation "androidx.recyclerview:recyclerview:${rootProject.ext.dependencies.recyclerview}"
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.24'
    implementation 'com.guolindev.permissionx:permissionx:1.6.4'
    implementation "androidx.activity:activity-ktx:1.2.2" // for ide hint

    if (readyPublishGithub.toBoolean()) {
        compileOnly "io.github.agoraio-community:AgoraEduCore:${rootProject.ext.dependencies.EduCore}"
    } else {
        implementation project(path: ':AgoraEduCore')
    }

    // for agora chat
    implementation 'io.agora.rtc:chat-sdk:1.2.0'
    implementation 'androidx.documentfile:documentfile:1.0.1'
    implementation 'com.squareup.okhttp3:okhttp:4.7.2'
    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:core:12.0.0'
    implementation 'com.pierfrancescosoffritti.androidyoutubeplayer:custom-ui:12.0.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.5.1"
}

//if (readyPublishMaven.toBoolean()) {
//    def current_gradle_path = buildscript.sourceFile.parentFile.parent
//    def maven_gradle_path = "$current_gradle_path/module_Maven.gradle"
//    if (new File(maven_gradle_path).exists()) {
//        apply from: maven_gradle_path
//    } else {
//        def errMsg = "$maven_gradle_path is not exists, please check."
//        logger.log(LogLevel.ERROR, errMsg)
//        throw new StopExecutionException(errMsg)
//    }
//}

mavenPublishing {
    coordinates(rootProject.ext.maven.group, "AgoraCloudScene", rootProject.ext.ClassSDK.versionName)
    //configure(AndroidMultiVariantLibrary(false, false))
    //configure(AndroidSingleVariantLibrary("release", false, false))
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()

    pom {
        name.set("AgoraCloudScene")
        description.set("Agora Lib")
        url.set("https://www.shengwang.cn/")

        licenses {
            license {
                name.set("The Apache License, Version 2.0")
                url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                distribution.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
            }
        }
        developers {
            developer {
                id.set("Agora")
                name.set("Agora")
                url.set("https://www.shengwang.cn/")
            }
        }
        scm {
            url.set("https://www.shengwang.cn/")
            connection.set("https://www.shengwang.cn/")
            developerConnection.set("https://www.shengwang.cn/")
        }
    }
}